{% extends 'base.html.twig' %}

{% block title %}Chat{% endblock %}

{% block body %}
<meta name="user-id" content="{{ app.user.id }}">
    {# <a href="{{ path('app_my_chats')}}">Back to my chats</a> #}
    <main class="chats">
        <aside>
            <div class="new-chat">
                <h3>Messages</h3>
                <div class="pen">
                    <i class="fas fa-pen"></i>
                </div>
            </div>
            <ul>
                {% if chats is not empty %}
                    {% for chat in chats %}
                        <li class="notif2">
                            <a href="{{ path('app_chat_view', {'id': chat.id}) }}">
                                {% if chat.users is defined %}
                                    {% for user in chat.users %}
                                        {% if user.id != app.user.id %}
                                            <img src="https://picsum.photos/200/300">
                                            <article>
                                                <p>{{ user }}</p>
                                                <p>
                                                    {% if chat.messages is not empty %}
                                                    {{ chat.messages[0].content | slice(0, 30) }}
                                                    {% if chat.messages[0].content | length > 30 %}...{% endif %}
                                                {% else %}
                                                    pas encore de messages.
                                                {% endif %}
                                                </p>
                                            </article>
                                        {% endif %}
                                    {% endfor %}
                                {% endif %}
                            </a>
                        </li>
                    {% endfor %}
                {% else %}
                    <li>Pas de chats disponibles</li>
                {% endif %}
            </ul>
        </aside>
        <section>
            <div>
                <div class="chat-with">
                    {# Afficher le nom de l'interlocuteur #}
                    {% for user in chat.users %}
                        {% if user.id != app.user.id %}
                            <div>
                                <img src="https://picsum.photos/200/200">
                                <h2>{{ user }}</h2>
                            </div>
                            <a href="{{ path('app_my_chats')}}">Mes Chats</a>
                        {% endif %}
                    {% endfor %}
                </div>
                <ul id="message-list">
                    {% for message in chat.messages %}
                        <li class="{{ message.userMessage.id == app.user.id ? 'notif2 sender' : 'notif2 receiver' }}">
                            {% if message.userMessage.id != app.user.id %}
                                <strong><img src="https://picsum.photos/200/200"></strong>
                            {% endif %}
                            <article>{{ message.content }}</article>
                        </li>
                    {% endfor %}
                </ul>
            </div>
            <form id="my-form" action="{{ path('app_send_message', {'id': chat.id}) }}" method="post" data-chat-id="{{ chat.id }}">
                <textarea name="content" required placeholder="Message..." rows="1" style="resize: none;"></textarea>
                <button type="submit"><i class="fa-solid fa-circle-right"></i></button>
            </form>
        </section>
    </main>
<script>
    document.addEventListener('turbo:load', function() {
        // Envoyer le formulaire en utilisant AJAX
        const form = document.querySelector('#my-form');
        form.addEventListener('submit', function(event) {
            event.preventDefault();

            const formData = new FormData(this);

            fetch(this.action, {
                method: 'POST',
                body: formData,
            })
            .then(function(response) {
                if (!response.ok) {
                    throw new Error('Error: ' + response.statusText);
                }
                return response.json();
            })
            .then(function(data) {
                console.log(data);

                // Vider le champ content
                form.elements['content'].value = '';
            })
            .catch(function(error) {
                console.error(error);
            });
        });
    
        const pathParts = new URL(form.action).pathname.split('/');
        const chatId = pathParts[pathParts.length - 2];
        const url = new URL('https://localhost/.well-known/mercure');
        url.searchParams.append('topic', 'http://localhost:8000/chat/' + chatId);
    
        // Récupérer l'ID de l'utilisateur actuel à partir de la balise meta
        const currentUser = document.querySelector('meta[name="user-id"]').getAttribute('content');

        const eventSource = new EventSource(url);
        console.log(url);

        eventSource.onmessage = function(event) {
            const data = JSON.parse(event.data);
        
            // Afficher l'ID de l'utilisateur actuel dans la console
            console.log("ID de l'utilisateur actuel:", currentUser);
        
            // Vérifier si l'ID de l'utilisateur qui a envoyé le message est le même que l'ID de l'utilisateur actuel
            const isCurrentUserSender = (data.userId === Number(currentUser));
        
            const messageList = document.getElementById('message-list');
            const newMessage = document.createElement('li');
            // Inverser les classes dans la condition ternaire
            newMessage.className = isCurrentUserSender ? 'notif2 sender' : 'notif2 receiver';
        
            if (!isCurrentUserSender) {
                const strongTag = document.createElement('strong');
                const imgTag = document.createElement('img');
                imgTag.src = 'https://picsum.photos/200/200'; // Utilisation de l'image de picsum
                strongTag.appendChild(imgTag);
                newMessage.appendChild(strongTag);
            }
        
            const articleTag = document.createElement('article');
            articleTag.textContent = data.message; // Contenu du message
            newMessage.appendChild(articleTag);
        
            messageList.appendChild(newMessage);
        };
    });
    
</script>

{% endblock %}